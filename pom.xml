<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.meow</groupId>
    <artifactId>MeowUID</artifactId>
    <version>beta</version>
    <packaging>jar</packaging>

    <name>MeowUID</name>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>  <!-- 设置 Java 编译源版本为 8 -->
        <maven.compiler.target>8</maven.compiler.target>  <!-- 设置 Java 编译目标版本为 8 -->
        <spigot.version>1.20.1-R0.1-SNAPSHOT</spigot.version>  <!-- Spigot 版本 -->
    </properties>

    <repositories>
        <repository>
            <id>spigot-repo</id>
            <url>https://hub.spigotmc.org/nexus/repository/public/</url>  <!-- Spigot 官方仓库 -->
        </repository>
        <repository>
            <id>jitpack.io</id>
            <url>https://jitpack.io</url>  <!-- JitPack 仓库 -->
        </repository>
    </repositories>

    <dependencies>
        <!-- Spigot API 依赖 -->
        <dependency>
            <groupId>org.spigotmc</groupId>
            <artifactId>spigot-api</artifactId>
            <version>${spigot.version}</version>
            <scope>provided</scope>  <!-- 表示编译时依赖，但运行时由服务器提供 -->
        </dependency>

        <!-- Vault API 依赖，从 JitPack 获取 -->
        <dependency>
            <groupId>com.github.MilkBowl</groupId>
            <artifactId>VaultAPI</artifactId>
            <version>1.7</version>
            <scope>provided</scope>  <!-- 表示编译时依赖，但运行时由服务器提供 -->
        </dependency>

        <!-- PlaceholderAPI 依赖 -->
        <dependency>
            <groupId>me.clip</groupId>
            <artifactId>PlaceholderAPI</artifactId>
            <version>2.11.3</version>  <!-- PlaceholderAPI 的版本，根据需要选择合适的版本 -->
            <scope>provided</scope>  <!-- 表示编译时依赖，但运行时由服务器提供 -->
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- 编译插件，用于设置 Java 编译器的版本 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${maven.compiler.source}</source>  <!-- 设置源代码版本 -->
                    <target>${maven.compiler.target}</target>  <!-- 设置目标版本 -->
                </configuration>
            </plugin>

            <!-- 资源插件，用于确保 plugin.yml 和 config.yml 等文件被正确打包 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <phase>validate</phase>  <!-- 在验证阶段执行 -->
                        <goals>
                            <goal>copy-resources</goal>  <!-- 复制资源文件 -->
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/classes</outputDirectory>  <!-- 复制到最终的 classes 目录 -->
                            <resources>
                                <resource>
                                    <directory>src/main/resources</directory>  <!-- 资源文件路径 -->
                                    <includes>
                                        <include>**/*.yml</include>  <!-- 包括所有的 YML 文件 -->
                                        <include>**/*.properties</include>  <!-- 包括所有的 properties 文件 -->
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- JAR 插件，用于生成最终的 JAR 文件并设置主类 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>  <!-- 添加类路径 -->
                            <mainClass>com.meow.meowjoincommand.MeowJoinCommand</mainClass>  <!-- 设置插件主类 -->
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
